package spotifybackup.storage;

import com.neovisionaries.i18n.CountryCode;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import lombok.NonNull;
import se.michaelthelin.spotify.model_objects.specification.Album;
import se.michaelthelin.spotify.model_objects.specification.AlbumSimplified;
import spotifybackup.storage.exception.ConstructorUsageException;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import static spotifybackup.storage.SpotifyObject.ensureTransactionActive;

class SpotifyAlbumRepository {
    /** @apiNote Should not be used, exists to prevent implicit public constructor. */
    private SpotifyAlbumRepository() {
        throw new ConstructorUsageException();
    }

    /**
     * Find SpotifyAlbum by Spotify ID string value.
     * @param id String containing a Spotify ID.
     * @return SpotifyAlbum if id matches the spotify_id field in the table and not blank.
     */
    static Optional<SpotifyAlbum> find(EntityManager entityManager, @NonNull String id) {
        if (id.isBlank() || entityManager.find(SpotifyID.class, id) == null) {
            return Optional.empty();
        }
        var query = entityManager.createNamedQuery("SpotifyAlbum.findBySpotifyID", SpotifyAlbum.class);
        query.setParameter("spotifyID", entityManager.find(SpotifyID.class, id));
        try {
            return Optional.of(query.getSingleResult());
        } catch (NoResultException e) {
            return Optional.empty();
        }
    }

    /**
     * Find SpotifyAlbum by spotifyID field.
     * @param apiAlbum AlbumSimplified object generated by the spotify-web-api.
     * @return SpotifyAlbum if apiAlbum already exists in the database.
     */
    static Optional<SpotifyAlbum> find(EntityManager entityManager, @NonNull AlbumSimplified apiAlbum) {
        return find(entityManager, apiAlbum.getId());
    }

    /**
     * Find SpotifyAlbum by spotifyID field.
     * @param apiAlbum Album object generated by the spotify-web-api.
     * @return SpotifyAlbum if apiAlbum already exists in the database.
     */
    static Optional<SpotifyAlbum> find(EntityManager entityManager, @NonNull Album apiAlbum) {
        return find(entityManager, apiAlbum.getId());
    }

    /**
     * Attempts to persist an AlbumSimplified from the output of the spotify-web-api.
     * @param apiAlbum AlbumSimplified object generated by the spotify-web-api.
     * @return SpotifyAlbum already in the database with matching Spotify ID or new SpotifyAlbum if apiAlbum has a new
     * Spotify ID.
     */
    static SpotifyAlbum persist(EntityManager entityManager, @NonNull AlbumSimplified apiAlbum) {
        ensureTransactionActive.accept(entityManager);
        var optionalAlbum = find(entityManager, apiAlbum);
        if (optionalAlbum.isPresent()) {
            return optionalAlbum.get();
        } else {
            var newAlbum = SpotifyAlbum.builder()
                    .isSimplified(true)
                    .spotifyID(new SpotifyID(apiAlbum.getId()))
                    .spotifyAlbumType(apiAlbum.getAlbumType())
                    .name(apiAlbum.getName())
                    .availableMarkets(convertMarkets(apiAlbum.getAvailableMarkets()))
                    .releaseDate(SpotifyObject.convertDate(apiAlbum.getReleaseDate(), apiAlbum.getReleaseDatePrecision()))
                    .releaseDatePrecision(apiAlbum.getReleaseDatePrecision())
                    .build();
            for (var apiArtist : apiAlbum.getArtists()) {
                newAlbum.addArtist(SpotifyArtistRepository.persist(entityManager, apiArtist));
            }
            entityManager.persist(newAlbum);
            return newAlbum;
        }
    }

    /**
     * Attempts to persist an Album from the output of the spotify-web-api.
     * @param apiAlbum Album object generated by the spotify-web-api.
     * @return SpotifyAlbum already in the database with matching Spotify ID or new SpotifyAlbum if apiAlbum has a new
     * Spotify ID.
     */
    static SpotifyAlbum persist(EntityManager entityManager, @NonNull Album apiAlbum) {
        ensureTransactionActive.accept(entityManager);
        var optionalAlbum = find(entityManager, apiAlbum);
        if (optionalAlbum.isPresent()) {
            return optionalAlbum.get();
        } else {
            var newAlbumBuilder = SpotifyAlbum.builder();
            newAlbumBuilder.isSimplified(false);
            newAlbumBuilder.spotifyID(new SpotifyID(apiAlbum.getId()));
            newAlbumBuilder.name(apiAlbum.getName());
            newAlbumBuilder.spotifyAlbumType(apiAlbum.getAlbumType());
            newAlbumBuilder.releaseDate(SpotifyObject.convertDate(apiAlbum.getReleaseDate(), apiAlbum.getReleaseDatePrecision()));
            newAlbumBuilder.releaseDatePrecision(apiAlbum.getReleaseDatePrecision());
            if (apiAlbum.getAvailableMarkets().length > 0) {
                newAlbumBuilder.availableMarkets(convertMarkets(apiAlbum.getAvailableMarkets()));
            }
            if (apiAlbum.getExternalIds().getExternalIds().containsKey("isrc")) {
                newAlbumBuilder.isrcID(apiAlbum.getExternalIds().getExternalIds().get("isrc"));
            }
            if (apiAlbum.getExternalIds().getExternalIds().containsKey("ean")) {
                newAlbumBuilder.eanID(apiAlbum.getExternalIds().getExternalIds().get("ean"));
            }
            if (apiAlbum.getExternalIds().getExternalIds().containsKey("upc")) {
                newAlbumBuilder.upcID(apiAlbum.getExternalIds().getExternalIds().get("upc"));
            }
            var newAlbum = newAlbumBuilder.build();
            for (var simplifiedApiArtist : apiAlbum.getArtists()) {
                newAlbum.addArtist(SpotifyArtistRepository.persist(entityManager, simplifiedApiArtist));
            }
            for (var simplifiedApiTrack : apiAlbum.getTracks().getItems()) {
                newAlbum.addTrack(SpotifyTrackRepository.persist(entityManager, simplifiedApiTrack, newAlbum));
            }
            newAlbum.addImages(SpotifyImageRepository.imageSetFactory(entityManager, apiAlbum.getImages()));
            newAlbum.addGenres(SpotifyGenreRepository.genreSetFactory(entityManager, apiAlbum.getGenres()));
            entityManager.persist(newAlbum);
            return newAlbum;
        }
    }

    /**
     * @param markets Array of CountryCode objects.
     * @return Array of Strings containing ISO 3166-1 alpha-2 market codes.
     */
    private static String[] convertMarkets(CountryCode[] markets) {
        Set<String> stringifiedMarkets = new HashSet<>();
        for (var market : markets) {
            stringifiedMarkets.add(market.getAlpha2());
        }
        return stringifiedMarkets.toArray(String[]::new);
    }
}
