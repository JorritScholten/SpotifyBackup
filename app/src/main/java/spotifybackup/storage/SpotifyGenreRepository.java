package spotifybackup.storage;

import jakarta.persistence.EntityManager;
import lombok.NonNull;
import org.hibernate.query.criteria.CriteriaDefinition;
import spotifybackup.storage.exception.ConstructorUsageException;

import java.util.*;

import static spotifybackup.storage.SpotifyObject.ensureTransactionActive;
import static spotifybackup.storage.SpotifyObject.getSingleResultOptionally;

class SpotifyGenreRepository {
    /** @apiNote Should not be used, exists to prevent implicit public constructor. */
    private SpotifyGenreRepository() {
        throw new ConstructorUsageException();
    }

    /**
     * Converts genreNames[] generated by spotify-web-api to Set<Genre> and updates link table for ManyToMany mapping.
     */
    static Set<SpotifyGenre> genreSetFactory(EntityManager entityManager, @NonNull String[] genreNames) {
        ensureTransactionActive.accept(entityManager);
        Set<SpotifyGenre> spotifyGenreSet = new HashSet<>();
        for (var genreName : genreNames) {
            spotifyGenreSet.add(persist(entityManager, genreName));
        }
        return spotifyGenreSet;
    }

    /**
     * Attempts to persist a genre by its name, if it already exists returns already existing SpotifyGenre.
     * @param genreName name of genre as defined by Spotify.
     * @return SpotifyGenre if genreName is not blank.
     */
    static SpotifyGenre persist(EntityManager entityManager, @NonNull String genreName) {
        ensureTransactionActive.accept(entityManager);
        if (genreName.isBlank()) throw new IllegalArgumentException("genreName should not be blank.");
        genreName = genreName.toLowerCase(Locale.ENGLISH);
        var optionalGenre = find(entityManager, genreName);
        if (optionalGenre.isPresent()) {
            return optionalGenre.get();
        } else {
            var newGenre = new SpotifyGenre(genreName);
            entityManager.persist(newGenre);
            return newGenre;
        }
    }

    /**
     * Find SpotifyGenre by its name field.
     * @param genreName name of SpotifyGenre.
     * @return SpotifyGenre if genreName is not blank and in the table.
     */
    static Optional<SpotifyGenre> find(EntityManager em, @NonNull String genreName) {
        genreName = genreName.toLowerCase(Locale.ENGLISH);
        var query = new CriteriaDefinition<>(em, SpotifyGenre.class) {};
        var root = query.from(SpotifyGenre.class);
        query.where(query.equal(root.get(SpotifyGenre_.name), genreName));
        return getSingleResultOptionally(em, query);
    }

    /**
     * Get list of all SpotifyGenre records in the database.
     * @return List of SpotifyGenre objects.
     */
    static List<SpotifyGenre> findAll(EntityManager em) {
        var query = new CriteriaDefinition<>(em, SpotifyGenre.class) {};
        query.from(SpotifyGenre.class);
        return em.createQuery(query).getResultList();
    }
}

