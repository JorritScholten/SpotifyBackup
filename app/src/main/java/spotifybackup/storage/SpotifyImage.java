package spotifybackup.storage;

import jakarta.persistence.*;
import lombok.*;
import se.michaelthelin.spotify.model_objects.specification.Image;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

@Builder
@NoArgsConstructor
@Getter
@AllArgsConstructor
@ToString
@Entity
public final class SpotifyImage extends SpotifyObject {
    @ManyToMany(fetch = FetchType.LAZY, mappedBy = SpotifyArtist_.IMAGES)
    private final Set<SpotifyArtist> artists = new HashSet<>();

    @ManyToMany(fetch = FetchType.LAZY, mappedBy = SpotifyAlbum_.IMAGES)
    private final Set<SpotifyAlbum> albums = new HashSet<>();

    @ManyToMany(fetch = FetchType.LAZY, mappedBy = SpotifyUser_.IMAGES)
    private final Set<SpotifyUser> users = new HashSet<>();

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long id;

    @NonNull
    @Column(nullable = false, unique = true, columnDefinition = "VARCHAR")
    private String url;

    private Integer width;

    private Integer height;

    /**
     * Factory method to create a Set of SpotifyImages from an Image array.
     * @param images Array of Image objects generated by spotify-web-api.
     * @return Set of SpotifyImages.
     */
    static Set<SpotifyImage> setFactory(@NonNull Image[] images) {
        Set<SpotifyImage> imageSet = new HashSet<>();
        for (var image : images) {
            var newSpotifyImage = SpotifyImage.builder()
                    .url(image.getUrl())
                    .width(image.getWidth())
                    .height(image.getHeight())
                    .build();
            imageSet.add(newSpotifyImage);
        }
        return imageSet;
    }

    public Optional<Integer> getHeight() {
        return height.describeConstable();
    }

    public Optional<Integer> getWidth() {
        return width.describeConstable();
    }
}
