package spotifybackup.storage;

import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.NoResultException;
import jakarta.persistence.Persistence;
import lombok.NonNull;

import java.util.Optional;
import java.util.Properties;

public class ArtistRepository {
    private final EntityManagerFactory emf;
    private final GenreRepository genreRepository;
    private final SpotifyImageRepository spotifyImageRepository;
    private final SpotifyIDRepository spotifyIDRepository;

    public ArtistRepository(Properties DB_ACCESS) {
        emf = Persistence.createEntityManagerFactory(DB_ACCESS.getProperty("persistenceUnitName"), DB_ACCESS);
        genreRepository = new GenreRepository(DB_ACCESS);
        spotifyImageRepository = new SpotifyImageRepository(DB_ACCESS);
        spotifyIDRepository = new SpotifyIDRepository(DB_ACCESS);
    }

    /**
     * Get count of artists in the database.
     * @return count of genres in the database.
     */
    public long count() {
        try (var entityManager = emf.createEntityManager()) {
            return (Long) entityManager.createNamedQuery("Artist.countBy").getSingleResult();
        }
    }

    /**
     * Find Artist by spotifyID field.
     * @param apiArtist Artist object generated by the spotify-web-api.
     * @return Artist if apiArtist already exists in the database.
     */
    public Optional<Artist> find(@NonNull se.michaelthelin.spotify.model_objects.specification.Artist apiArtist) {
        try (var entityManager = emf.createEntityManager()) {
            var query = entityManager.createNamedQuery("Artist.findBySpotifyID", Artist.class);
            final var optionalSpotifyID = spotifyIDRepository.find(apiArtist.getId());
            if (optionalSpotifyID.isEmpty()) {
                return Optional.empty();
            } else {
                query.setParameter("spotifyID", optionalSpotifyID.get());
                try {
                    return Optional.of(query.getSingleResult());
                } catch (NoResultException e) {
                    return Optional.empty();
                }
            }
        }
    }

    /**
     * Checks if Artist object generated by the spotify-web-api already exists in the database.
     * @param apiArtist Artist object generated by the spotify-web-api.
     * @return true if apiArtist already exists in the database.
     */
    public boolean exists(@NonNull se.michaelthelin.spotify.model_objects.specification.Artist apiArtist) {
        return find(apiArtist).isPresent();
    }

    /**
     * Attempts to persist an Artist from the output of the spotify-web-api.
     * @param apiArtist Artist object generated by the spotify-web-api.
     * @return Artist if already in the database or if apiArtist has a new Spotify ID.
     */
    public Optional<Artist> persist(@NonNull se.michaelthelin.spotify.model_objects.specification.Artist apiArtist) {
        var optionalArtist = find(apiArtist);
        if (optionalArtist.isPresent()) {
            return optionalArtist;
//            } else if (image.getUrl().isBlank() || image.getUrl().length() > 255) {
//                // fail silently if url too long or empty
//                return Optional.empty();
        } else {
            var newArtist = Artist.builder()
                    .name(apiArtist.getName())
                    .spotifyID(new SpotifyID(apiArtist.getId()))
                    .images(SpotifyImage.setFactory(apiArtist.getImages()))
                    .genres(Genre.setFactory(apiArtist.getGenres()))
                    .build();
            try (var entityManager = emf.createEntityManager()) {
                entityManager.getTransaction().begin();
                entityManager.persist(newArtist);
                entityManager.getTransaction().commit();
                return Optional.of(newArtist);
            }
        }
    }
}
