package spotifybackup.storage;

import com.neovisionaries.i18n.CountryCode;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.NoResultException;
import jakarta.persistence.Persistence;
import lombok.NonNull;

import java.util.HashSet;
import java.util.Optional;
import java.util.Properties;
import java.util.Set;

public class SpotifyTrackRepository {
    private final EntityManagerFactory emf;
    private final SpotifyIDRepository spotifyIDRepository;

    public SpotifyTrackRepository(Properties DB_ACCESS) {
        emf = Persistence.createEntityManagerFactory(DB_ACCESS.getProperty("persistenceUnitName"), DB_ACCESS);
        spotifyIDRepository = new SpotifyIDRepository(DB_ACCESS);
    }

    /**
     * Get count of tracks in the database.
     * @return count of tracks in the database.
     */
    public long count() {
        try (var entityManager = emf.createEntityManager()) {
            return (Long) entityManager.createNamedQuery("SpotifyArtist.countBy").getSingleResult();
        }
    }

    /**
     * Find SpotifyTrack by spotifyID field.
     * @param apiTrack Track object generated by the spotify-web-api.
     * @return SpotifyTrack if apiTrack already exists in the database.
     */
    public Optional<SpotifyTrack> find(@NonNull se.michaelthelin.spotify.model_objects.specification.Track apiTrack) {
        return find(apiTrack.getId());
    }

    /**
     * Find Artist by Spotify ID string value.
     * @param id String containing a Spotify ID.
     * @return Artist if id matches the spotify_id field in the table and not blank.
     */
    public Optional<SpotifyTrack> find(@NonNull String id) {
        try (var entityManager = emf.createEntityManager()) {
            final var optionalSpotifyID = spotifyIDRepository.find(id);
            if (optionalSpotifyID.isEmpty()) {
                return Optional.empty();
            } else {
                var query = entityManager.createNamedQuery("SpotifyTrack.findBySpotifyID", SpotifyTrack.class);
                query.setParameter("spotifyID", optionalSpotifyID.get());
                try {
                    return Optional.of(query.getSingleResult());
                } catch (NoResultException e) {
                    return Optional.empty();
                }
            }
        }
    }

    /**
     * Attempts to persist a Track from the output of the spotify-web-api.
     * @param apiTrack Track object generated by the spotify-web-api.
     * @return SpotifyTrack already in the database with matching Spotify ID or new SpotifyTrack if apiTrack has a new
     * Spotify ID.
     */
    public SpotifyTrack persist(@NonNull se.michaelthelin.spotify.model_objects.specification.Track apiTrack) {
        var optionalTrack = find(apiTrack);
        if (optionalTrack.isPresent()) {
            return optionalTrack.get();
        } else {
            try (var entityManager = emf.createEntityManager()) {
                var newTrackBuilder = SpotifyTrack.builder();
                newTrackBuilder.isSimplified(false);
//                if (spotifyIDRepository.exists(apiTrack.getAlbum().getId())) {
//                    var query = entityManager.createNamedQuery("SpotifyAlbum.findBySpotifyID", SpotifyAlbum.class);
//                    query.setParameter("spotifyID", apiTrack.getAlbum().getId());
//                    newTrackBuilder.spotifyAlbum(query.getSingleResult());
//                } else {
//                    // store simplified album object
//                    // update data from simplified album with complete album later
//                }
                newTrackBuilder.spotifyAlbum(SpotifyAlbumRepository.persist(entityManager, apiTrack.getAlbum()));
                newTrackBuilder.spotifyID(new SpotifyID(apiTrack.getId()));
                newTrackBuilder.discNumber(apiTrack.getDiscNumber());
                newTrackBuilder.duration_ms(apiTrack.getDurationMs());
                newTrackBuilder.explicit(apiTrack.getIsExplicit());
                if (apiTrack.getExternalIds().getExternalIds().containsKey("isrc")) {
                    newTrackBuilder.isrcID(apiTrack.getExternalIds().getExternalIds().get("isrc"));
                }
                newTrackBuilder.name(apiTrack.getName());
                if (apiTrack.getAvailableMarkets().length > 0) {
                    newTrackBuilder.availableMarkets(convertMarkets(apiTrack.getAvailableMarkets()));
                }
                var newTrack = newTrackBuilder.build();
                for (var simplifiedApiArtist : apiTrack.getArtists()) {
                    newTrack.addArtist(SpotifyArtistRepository.persist(entityManager, simplifiedApiArtist));
                }
            }
        }
    }

    /**
     * @param markets Array of CountryCode objects.
     * @return Array of Strings containing ISO 3166-1 alpha-2 market codes.
     */
    private String[] convertMarkets(CountryCode[] markets) {
        Set<String> stringifiedMarkets = new HashSet<>();
        for (var market : markets) {
            stringifiedMarkets.add(market.getAlpha2());
        }
        return stringifiedMarkets.toArray(String[]::new);
    }
}
