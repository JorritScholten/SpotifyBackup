package spotifybackup.storage;

import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import lombok.NonNull;
import se.michaelthelin.spotify.model_objects.AbstractModelObject;
import se.michaelthelin.spotify.model_objects.specification.Artist;
import se.michaelthelin.spotify.model_objects.specification.ArtistSimplified;
import spotifybackup.storage.exception.ConstructorUsageException;

import java.util.Optional;

import static spotifybackup.storage.SpotifyObject.ensureTransactionActive;

class SpotifyArtistRepository {
    /** @apiNote Should not be used, exists to prevent implicit public constructor. */
    private SpotifyArtistRepository() {
        throw new ConstructorUsageException();
    }

    /**
     * Find SpotifyArtist by spotifyID field.
     * @param apiArtist ArtistSimplified object generated by the spotify-web-api.
     * @return SpotifyArtist if apiArtist already exists in the database.
     */
    static Optional<SpotifyArtist> find(EntityManager entityManager, @NonNull ArtistSimplified apiArtist) {
        return find(entityManager, apiArtist.getId());
    }

    /**
     * Find SpotifyArtist by spotifyID field.
     * @param apiArtist Artist object generated by the spotify-web-api.
     * @return SpotifyArtist if apiArtist already exists in the database.
     */
    static Optional<SpotifyArtist> find(EntityManager entityManager, @NonNull Artist apiArtist) {
        return find(entityManager, apiArtist.getId());
    }

    /**
     * Find SpotifyArtist by Spotify ID string value.
     * @param id String containing a Spotify ID.
     * @return SpotifyArtist if id matches the spotify_id field in the table and not blank.
     */
    static Optional<SpotifyArtist> find(EntityManager entityManager, @NonNull String id) {
        if (id.isBlank() || entityManager.find(SpotifyID.class, id) == null) {
            return Optional.empty();
        }
        var query = entityManager.createNamedQuery("SpotifyArtist.findBySpotifyID", SpotifyArtist.class);
        query.setParameter("spotifyID", entityManager.find(SpotifyID.class, id));
        try {
            return Optional.of(query.getSingleResult());
        } catch (NoResultException e) {
            return Optional.empty();
        }
    }

    /**
     * Attempts to persist an ArtistSimplified from the output of the spotify-web-api.
     * @param apiArtist ArtistSimplified object generated by the spotify-web-api.
     * @return SpotifyArtist already in the database with matching Spotify ID or new SpotifyArtist if apiArtist has a
     * new Spotify ID.
     */
    static SpotifyArtist persist(EntityManager entityManager, @NonNull ArtistSimplified apiArtist) {
        ensureTransactionActive.accept(entityManager);
        var optionalArtist = find(entityManager, apiArtist);
        if (optionalArtist.isPresent()) {
            return optionalArtist.get();
        } else {
            var newArtist = SpotifyArtist.builder()
                    .name(apiArtist.getName())
                    .spotifyID(new SpotifyID(apiArtist.getId()))
                    .isSimplified(true)
                    .build();
            entityManager.persist(newArtist);
            return newArtist;
        }
    }

    static SpotifyArtist persist(EntityManager entityManager, @NonNull AbstractModelObject apiArtist) {
        if (apiArtist instanceof Artist a) return persist(entityManager, a);
        else throw new IllegalArgumentException("apiArtist should be of type Artist here.");
    }

    /**
     * Attempts to persist an Artist from the output of the spotify-web-api.
     * @param apiArtist Artist object generated by the spotify-web-api.
     * @return Artist already in the database with matching Spotify ID or new Artist if apiArtist has a new Spotify ID.
     */
    static SpotifyArtist persist(EntityManager entityManager, @NonNull Artist apiArtist) {
        ensureTransactionActive.accept(entityManager);
        var optionalArtist = find(entityManager, apiArtist);
        if (optionalArtist.isPresent()) {
            return optionalArtist.get();
        } else {
            var newArtist = SpotifyArtist.builder()
                    .name(apiArtist.getName())
                    .spotifyID(new SpotifyID(apiArtist.getId()))
                    .isSimplified(false)
                    .build();
            newArtist.addImages(SpotifyImageRepository.imageSetFactory(entityManager, apiArtist.getImages()));
            newArtist.addGenres(SpotifyGenreRepository.genreSetFactory(entityManager, apiArtist.getGenres()));
            entityManager.persist(newArtist);
            return newArtist;
        }
    }
}
